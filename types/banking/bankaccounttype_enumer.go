// Code generated by "enumer -type=BankAccountType -json"; DO NOT EDIT.

package banking

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BankAccountTypeName = "BusinessPersonal"

var _BankAccountTypeIndex = [...]uint8{0, 8, 16}

const _BankAccountTypeLowerName = "businesspersonal"

func (i BankAccountType) String() string {
	i -= 1
	if i < 0 || i >= BankAccountType(len(_BankAccountTypeIndex)-1) {
		return fmt.Sprintf("BankAccountType(%d)", i+1)
	}
	return _BankAccountTypeName[_BankAccountTypeIndex[i]:_BankAccountTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BankAccountTypeNoOp() {
	var x [1]struct{}
	_ = x[Business-(1)]
	_ = x[Personal-(2)]
}

var _BankAccountTypeValues = []BankAccountType{Business, Personal}

var _BankAccountTypeNameToValueMap = map[string]BankAccountType{
	_BankAccountTypeName[0:8]:       Business,
	_BankAccountTypeLowerName[0:8]:  Business,
	_BankAccountTypeName[8:16]:      Personal,
	_BankAccountTypeLowerName[8:16]: Personal,
}

var _BankAccountTypeNames = []string{
	_BankAccountTypeName[0:8],
	_BankAccountTypeName[8:16],
}

// BankAccountTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BankAccountTypeString(s string) (BankAccountType, error) {
	if val, ok := _BankAccountTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BankAccountTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BankAccountType values", s)
}

// BankAccountTypeValues returns all values of the enum
func BankAccountTypeValues() []BankAccountType {
	return _BankAccountTypeValues
}

// BankAccountTypeStrings returns a slice of all String values of the enum
func BankAccountTypeStrings() []string {
	strs := make([]string, len(_BankAccountTypeNames))
	copy(strs, _BankAccountTypeNames)
	return strs
}

// IsABankAccountType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BankAccountType) IsABankAccountType() bool {
	for _, v := range _BankAccountTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BankAccountType
func (i BankAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BankAccountType
func (i *BankAccountType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BankAccountType should be a string, got %s", data)
	}

	var err error
	*i, err = BankAccountTypeString(s)
	return err
}
